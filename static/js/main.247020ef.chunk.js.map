{"version":3,"sources":["logo.svg","views/home.js","views/BasicComputing.js","views/LinearEquations.js","views/Interpolation.js","views/Differentiation.js","views/Integration.js","views/Rootfinding.js","rounting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","navigate","useNavigate","nextPage","page","class","Button","onClick","color","BasicComputing","LinearEquations","Interpolation","Differentiation","Integration","Rootfinding","rounting","path","element","App","routing","useRoutes","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6GC4C5BC,MArCf,WACE,IAAMC,EAAWC,cAEXC,EAAW,SAACC,GAChBH,EAAS,IAAIG,IAGf,OACE,yBAAKC,MAAM,UACP,yBAAKA,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,mBAAoBK,MAAM,UAAS,kDAAmC,8BAErG,6BACA,yBAAKH,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,oBAAqBK,MAAM,UAAS,mDAAoC,8BAEvG,6BACA,yBAAKH,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,kBAAmBK,MAAM,UAAS,gDAAiC,8BAElG,6BACA,yBAAKH,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,oBAAqBK,MAAM,UAAS,kDAAmC,8BAEtG,6BACA,yBAAKH,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,gBAAiBK,MAAM,UAAS,8CAA+B,8BAE9F,6BACA,yBAAKH,MAAM,eACX,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKJ,EAAS,gBAAiBK,MAAM,UAAS,+CAAgC,gCC3BxFC,MARf,WACI,OACI,mDCMOC,MARf,WACI,OACI,oDCMOC,MARf,WACI,OACI,iDCMOC,MARf,WACI,OACI,mDCMOC,MARf,WACI,OACI,+CCMOC,MARf,WACI,OACI,gDCwCSC,EAnCA,CACb,CACEC,KAAM,IACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,iBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,gBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,cACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,cACNC,QAAS,kBAAC,EAAD,QC7BAC,EALH,WACV,IAAMC,EAAUC,YAAUC,GAC1B,OAAO,6BAAMF,I,OCIKG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.247020ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport { CardTitle, CardText, Row, Col, Button, Card } from \"reactstrap\";\r\nimport \"../App.css\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction Home() {\r\n  const navigate = useNavigate();\r\n\r\n  const nextPage = (page) => {\r\n    navigate(\"/\"+page);\r\n  }\r\n\r\n  return (\r\n    <div class=\"center\">\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"BasicComputing\")}} color=\"danger\"><h5>1.Basic Computing</h5></Button><br/>\r\n        </div>\r\n        <br/>\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"LinearEquations\")}} color=\"danger\"><h5>2.Linear Equations</h5></Button><br/>\r\n        </div>\r\n        <br/>\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"Interpolation\")}} color=\"danger\"><h5>3.Interpolation</h5></Button><br/>\r\n        </div>\r\n        <br/>\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"Differentiation\")}} color=\"danger\"><h5>4.Differentiation</h5></Button><br/>\r\n        </div>\r\n        <br/>\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"Integration\")}} color=\"danger\"><h5>5.Integration</h5></Button><br/>\r\n        </div>\r\n        <br/>\r\n        <div class=\"text-center\">\r\n        <Button onClick={()=>{nextPage(\"Rootfinding\")}} color=\"danger\"><h5>6.Root-finding</h5></Button><br/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nfunction BasicComputing() {\r\n    return (\r\n        <div>\r\n            1.Basic Computing\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BasicComputing;","import React from 'react'\r\n\r\nfunction LinearEquations() {\r\n    return (\r\n        <div>\r\n            2.Linear Equations\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearEquations;","import React from 'react'\r\n\r\nfunction Interpolation() {\r\n    return (\r\n        <div>\r\n            3.Interpolation\t\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Interpolation;","import React from 'react'\r\n\r\nfunction Differentiation() {\r\n    return (\r\n        <div>\r\n            4.Differentiation\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Differentiation;","import React from 'react'\r\n\r\nfunction Integration() {\r\n    return (\r\n        <div>\r\n            5.Integration\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Integration;","import React from 'react'\r\n\r\nfunction Rootfinding() {\r\n    return (\r\n        <div>\r\n            6.Root-finding\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rootfinding;","import React from 'react'\r\nimport Home from './views/home'\r\nimport BasicComputing from './views/BasicComputing'\r\nimport LinearEquations from './views/LinearEquations'\r\nimport Interpolation from './views/Interpolation'\r\nimport Differentiation from './views/Differentiation'\r\nimport Integration from './views/Integration'\r\nimport Rootfinding from './views/Rootfinding'\r\n\r\nconst rounting = [\r\n    {\r\n      path: \"/\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"commath-project\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"BasicComputing\",\r\n      element: <BasicComputing />,\r\n    },\r\n    {\r\n      path: \"LinearEquations\",\r\n      element: <LinearEquations />,\r\n    },\r\n    {\r\n      path: \"Interpolation\",\r\n      element: <Interpolation />,\r\n    },\r\n    {\r\n      path: \"Differentiation\",\r\n      element: <Differentiation />,\r\n    },\r\n    {\r\n      path: \"Integration\",\r\n      element: <Integration />,\r\n    },\r\n    {\r\n      path: \"Rootfinding\",\r\n      element: <Rootfinding />,\r\n    },\r\n  ];\r\n  \r\n  export default rounting;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport routes from \"./rounting\";\r\nimport { useRoutes } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  const routing = useRoutes(routes);\r\n  return <div>{routing}</div>;\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}